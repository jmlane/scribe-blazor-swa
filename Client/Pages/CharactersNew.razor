@page "/characters/new"

@using Scribe.Client.CharacterSheet
@using System.ComponentModel.DataAnnotations

@inject ILogger<CharactersNew> Logger
@inject HttpClient HttpClient

<EditForm Model="Model" FormName="Character" OnValidSubmit="Submit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <button type="submit" class="btn btn-primary">Save</button>
    <div class="mb-3">
        <label for="character-name">Name</label>
        <InputText class="form-control" @bind-Value="Model!.Name" />
    </div>
    <div class="mb-3">
        <label for="character-player">Player</label>
        <InputText class="form-control" @bind-Value="Model.Player" />
    </div>
    <div class="mb-3">
        <label for="character-archetype">Archetype</label>
        <InputText class="form-control" @bind-Value="Model.Archetype" />
    </div>
    <fieldset>
        <legend>Characteristics</legend>
        <CharacteristicInput Name="Brawn" @bind-Value="@Model.Brawn" @bind-Value:after="@(() => Logger.LogInformation("Brawn: {value}", Model.Brawn))" />
        <CharacteristicInput Name="Agility" @bind-Value="@Model.Agility" />
        <CharacteristicInput Name="Intellect" @bind-Value="@Model.Intellect" />
        <CharacteristicInput Name="Cunning" @bind-Value="@Model.Cunning" />
        <CharacteristicInput Name="Willpower" @bind-Value="@Model.Willpower" />
        <CharacteristicInput Name="Presence" @bind-Value="@Model.Presence" />
    </fieldset>
</EditForm>

@code
{
    private CharacterModel? Model { get; set; }

    protected override void OnInitialized()
    {
        Model ??= new();
    }

    private async Task Submit()
    {
        var result = await HttpClient.PostAsJsonAsync(
            "characters",
            new Shared.Character
            {
                Name = Model.Name,
                Player = Model.Player,
                Archetype = Model.Archetype,
                Brawn = Model.Brawn,
                Agility = Model.Agility,
                Intellect = Model.Intellect,
                Cunning = Model.Cunning,
                Willpower = Model.Willpower,
                Presence = Model.Presence
            });

        Logger.LogInformation("Result: {result}", result);
    }

    public record class CharacterModel
    {
        public string Name { get; set; }
        public string Player { get; set; }
        public string Archetype { get; set; }

        [Range(0, 6)]
        public int Brawn { get; set; }
        [Range(0, 6)]
        public int Agility { get; set; }
        [Range(0, 6)]
        public int Intellect { get; set; }
        [Range(0, 6)]
        public int Cunning { get; set; }
        [Range(0, 6)]
        public int Willpower { get; set; }
        [Range(0, 6)]
        public int Presence { get; set; }
    }
}
